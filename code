https://www.geeksforgeeks.org/implement-your-own-word2vecskip-gram-model-in-python/

https://towardsdatascience.com/an-implementation-guide-to-word2vec-using-numpy-and-google-sheets-13445eebd281

https://www.kaggle.com/mrisdal/fake-news/downloads/fake-news.zip/1

import re

class MLStripper(HTMLParser):
    def __init__(self):
        # initialize the base class
        HTMLParser.__init__(self)

    def read(self, data):
        # clear the current output before re-use
        self._lines = []
        # re-set the parser's state before re-use
        self.reset()
        self.feed(data)
        return ''.join(self._lines)

    def handle_data(self, d):
        self._lines.append(d)

def strip_tags(html):
    s = MLStripper()
    return s.read(html)
    

mailBody=re.sub('[^A-Za-z.]+', ' ', strip_tags(mailBody)).strip()

dep=getDependency('You need to do this today.')

def column(matrix, i):
    return [row[i] for row in matrix]
if((column(dep,4).count('VERB'))>0):
     for e in range(len(dep)):
            if((dep[e][4]=='VERB') or (dep[e][3]=='VERB' and dep[e][1]=='aux')):
                print(dep[e][0])
                
def getTenseOfSent(dep):
    tense = {}
    past=fut=pres=0   
    
    for i in range(len(dep)):         
        if(dep[i][5] in ["MD","VBC","VBF"]):
            fut=fut+1
        if(dep[i][5] in ["VBP", "VBZ","VBG","VB"]):
            pres=pres+1        
        if(dep[i][5] in ["VBD", "VBN"]):
            past=past+1
        
    tense["future"] =fut
    tense["present"]=pres
    tense["past"] =past    
    return json.dumps(tense)

listA=[]
import re
for i in range(len(df.text.values)):
    texts=df.text.values[i]
    print(type(texts))
    if(type(texts) is not float):        
        text=texts.split('\n')
        for j in range(len(text)):
            sent=text[j].split('.')
            for k in range(len(sent)):
                s=re.sub('[^A-Za-z.]+', ' ', sent[k]).strip()
                if(len(s)>10):
                    listA.append(s)
